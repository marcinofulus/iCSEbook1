Atraktory
=========

Atraktor :math:`A` to taki zbiór w przestrzeni fazowej układu dynamicznego, że wiele trajektorii startujących nawet bardzo daleko od tego zbioru  dąży w miarę upływu czasu do tego zbioru :math:`A`.  Najprościej jest to zrozumieć na przykładzie oscylatora tłumionego. Realizacją takiego oscylatora może być wahadło matematyczne czyli kulka  na nieważkim pręcie zawieszona w jakimś środowisku (byleby nie w próżni). Na kulkę działa siła przyciągania ziemskiego i siła tarcia. Kulkę wychylamy o dowolny kąt od pozycji pionowej  i obserwujemy trajektorię  kulki. Kulka wykonuje coraz to mniejsze wahania i po dostatecznie długim czasie zatrzymuje się w pozycji pionowej. Kulkę możemy wychylać o dowolny kąt, nadawać jej dowolną prędkość, a i tak po pewnym czasie kulka zatrzyma  się w pozycji pionowej, która odpowiada zerowemu wychyleniu kulki. Ten zerowy kąt wychylenia jest atraktorem. W tym przypadku atraktorem jest  punkt w przestrzeni fazowej. Ponieważ przestrzeń fazowa oscylatora harmonicznego  tłumionego jest 2-wymiarowa położenie-prędkość, atraktorem jest punkt :math:`A = (położenie = 0, prędkość = 0)`. 

Podamy teraz bardziej formalną definicję.

Atraktor
  Atraktorem nazywamy ograniczony zbiór w przestrzeni fazowej, do którego dążą asymptotycznie w czasie (tzn. gdy :math:`t \to \infty`) obszary warunków początkowych o niezerowej objętości  w przestrzeni fazowej. Atraktor to inaczej zbiór przyciągający: przyciąga on trajektorie o różnych warunkach początkowych.  Ale nie musi on przyciągać wszystkich trajektorii. Dla danego układu dynamicznego może istnieć wiele atraktorów, nawet nieskończenie wiele. Atroktory mogą mieć  nieskomplikowaną strukturę: to może być  punkt, kilka piunktów, krzywa taka jak okrąg czy zdeformowana elipsa, część płaszczyzny, torus (podobny do dętki),  część przestrzeni. Atraktory mogą też  mieć skomplikowaną strukturę: może to być zbiór fraktalny, tzn. zbiór o niecałkowitym wymiarze, np. 0.63, 2.06. Taki atraktor nazywa się *dziwnym atraktorem*.

Z atraktorami związane są obszary przyciągania lub baseny przyciągania :math:`B(A)`. Basenem przyciągania atraktora :math:`A` nazywamy zbiór warunków początkowych :math:`x_0` , dla których trajektorie są przyciągane do :math:`A`, czyli 

.. MATH::
    :label: eqn1

    B(A) = \{ x_0: lim_{t \to \infty} x(t; x_0) \in A\}


gdzie :math:`x(t; x_0)` jest trajektorią startującą z warunku początkowego :math:`x_0`, np. rozwiązaniem układu równań różniczkowych  z odpowiednimi warunkami początkowymi :math:`\vec x_0`.

Przykład 1: oscylator harmoniczny tłumiony
------------------------------------------

Jest tylko jeden atraktor: to punkt (0, 0). Basenem przyciągania jest cała płaszczyzna fazowa.

.. sagecellserver::
    :is_verbatim: True

    sage: var('x,y')
    sage: T = srange(0,50,0.01)
    sage: sol1=desolve_odeint(vector([y,-x -0.2*y]), [0,1], T, [x,y])##warunek początkowy x=2, y=4
    sage: sol2=desolve_odeint(vector([y,-x -0.2*y]), [0,0.85], T, [x,y])##warunek początkowy x=-1, y=0.5
    sage: sol3=desolve_odeint(vector([y,-x -0.2*y]), [0,0.7], T, [x,y])##warunek początkowy x=0, y=0.9
    sage: p1=plot(x^2, -2, 2,figsize=(6,3), )
    sage: g1=list_plot(sol1.tolist(), plotjoined=1, figsize=(6,3),axes_labels=[r'$x$',r'$y$'])
    sage: g1 +=list_plot(sol2.tolist(), plotjoined=1, figsize=(6,3),color="red", axes_labels=[r'$x$',r'$y$'])
    sage: g1 +=list_plot(sol3.tolist(), plotjoined=1, figsize=(6,3),color="green", axes_labels=[r'$x$',r'$y$'])
    sage: html.table([["potencjał kwadratowy","oscylator tłumiony"],[p1,g1]])
    sage: html("<p align='center'>wszystkie rozwiązania dążą do punktu (0,0) </p>")

.. end of input

Przykład 2: oscylator nieliniowy (bistabilny)  tłumiony
-------------------------------------------------------

Są dwa  atraktory:  punkt :math:`(-x_s, 0)` oraz symetryczny punkt :math:`(x_s, 0)`, gdzie :math:`x_s` jest stanem stacjonarnym. Płaszczyzna fazowa dzieli się na 2 baseny przyciągania, które są "pasiastymi" naprzemiennymi zbiorami.Przejrzysta wizualizacja jest opracowana na naszej stronie internetowej:

http://visual.icse.us.edu.pl/wizualizacje/mechanika-teoretyczna/zobacz/BasenyPrzyciagania/



.. sagecellserver::
    :is_verbatim: True

    sage: var('x,y')
    sage: T1 = srange(0,30,0.01)
    sage: so1=desolve_odeint(vector([y,2*x-1.2*x^3 -0.2*y]), [0,1], T1, [x,y])##warunek początkowy x=2, y=4
    sage: so2=desolve_odeint(vector([y,2*x-1.2*x^3 -0.2*y]), [0,2], T1, [x,y])##warunek początkowy x=-1, y=0.5
    sage: so3=desolve_odeint(vector([y,2*x-1.2*x^3-0.2*y]), [0,3], T1, [x,y])##warunek początkowy x=0, y=0.9
    sage: so4=desolve_odeint(vector([y,2*x-1.2*x^3-0.2*y]), [0,4], T1, [x,y])##warunek początkowy x=0, y=0.9
    sage: p11=plot(0.3*x^4 - x^2, -2, 2,figsize=(6,3), )
    sage: g11=list_plot(so1.tolist(), plotjoined=1, figsize=(6,3),axes_labels=[r'$x$',r'$y$'])
    sage: g11 +=list_plot(so2.tolist(), plotjoined=1, figsize=(6,3),color="red", axes_labels=[r'$x$',r'$y$'])
    sage: g11 +=list_plot(so3.tolist(), plotjoined=1, figsize=(6,3),color="green", axes_labels=[r'$x$',r'$y$'])
    sage: g11 +=list_plot(so4.tolist(), plotjoined=1, figsize=(6,3),color="black", axes_labels=[r'$x$',r'$y$'])
    sage: html.table([["potencjał bistabilny","oscylator nieliniowy tłumiony"],[p11,g11]])
    sage: html("<p align='center'> rozwiązania dążą albo do punktu $(-x_s,0)$ albo to punktu $(x_s,0)$ </p>")

.. end of input

Przykład 3: Cykl graniczny
--------------------------

Atraktorem jest krzywa zamknięta (okrąg, elipsa, inne dowolne krzywe zamknięte).  Poniżej przedstawiamy dwa przykłady zaczerpnięte z modeli biologicznych.

.. sagecellserver::
    :is_verbatim: True

    sage: var('x,y')
    sage: T3 = srange(0,50,0.01)
    sage: de1=y+x*(0.2-(x^2+y^2))
    sage: de2=-x+y*(0.2-(x^2+y^2))
    sage: s1=desolve_odeint(vector([de1, de2]), [0.5,0.5], T3, [x,y])##warunek początkowy x=2, y=4
    sage: s2=desolve_odeint(vector([de1, de2]), [0.01, 0.01], T3, [x,y])##warunek początkowy x=2, y=4
    sage: h1=list_plot(s1.tolist(), plotjoined=1, figsize=(6,3),color="red",axes_labels=[r'$x$',r'$y$'])
    sage: h2=list_plot(s2.tolist(), plotjoined=1, figsize=(6,3),axes_labels=[r'$x$',r'$y$'])
    sage: show(h1+h2)
    
.. end of input

.. sagecellserver::
    :is_verbatim: True

    sage: var('x,y')
    sage: a, b, d = 1.3, 0.33, 0.1
    sage: F(x,y)=x*(1-x) - a*x*y/(x+d)
    sage: G(x,y)= b*y*(1-y/x)
    sage: T = srange(0,80,0.01)
    sage: sl1=desolve_odeint(vector([F,G]), [0.2,0.3], T, [x,y])
    sage: sl2=desolve_odeint(vector([F,G]), [0.2,0.2], T, [x,y])
    sage: j1=list_plot(sl1.tolist(), plotjoined=1, color="red", figsize=(6, 3))
    sage: j2=list_plot(sl2.tolist(), plotjoined=1,  figsize=(6, 3))
    sage: show(j1+j2)
    
.. end of input

.. sagecellserver::
    :is_verbatim: True

    sage: var('x,y')
    sage: a, b, d = 1.3, 0.33, 0.1
    sage: F(x,y)=x*(1-x) - a*x*y/(x+d)
    sage: G(x,y)= b*y*(1-y/x)    
    sage: T = srange(0,200,0.01)
    sage: sl1=desolve_odeint(vector([F,G]), [0.2,0.3], T, [x,y])
    sage: sl2=desolve_odeint(vector([F,G]), [0.2,0.2], T, [x,y])
    sage: j1=list_plot(sl1.tolist(), plotjoined=1, color="red", figsize=(6, 3))
    sage: j2=list_plot(sl2.tolist(), plotjoined=1,  figsize=(6, 3))
    sage: show(j1+j2)
    
.. end of input

Przykład 4: Atraktor Lorenza
----------------------------

Jest to przykład tak zwanego dziwnego atraktora. Najprostsza jego definicja to taka, że posiada on strukturę fraktala. O układzie Lorenza generującym ten fraktal można poczytać w poprzednim rozdziale tego skryptu, traktującym o stanach stacjonarnych.

.. sagecellserver::
    :is_verbatim: True

    sage: var('x y z')
    sage: rho=28
    sage: sigma=10
    sage: beta=8/3
    sage: F1 = sigma*(y-x)
    sage: F2 = x*(rho-z) - y
    sage: F3 = x*y - beta*z
    sage: T = srange(0,100,0.01)
    sage: atraktor_lorenza = desolve_odeint(vector([F1,F2,F3]), [0,0.5,1], T, [x,y,z])
    sage: p2d = list_plot(zip(atraktor_lorenza[:,0],atraktor_lorenza[:,1]), plotjoined=1, figsize=4)
    sage: p3d = list_plot(atraktor_lorenza.tolist(), plotjoined=1, viewer='tachyon', figsize=4)
    sage: print "2D rysunek atraktora Lorenza"
    sage: p2d.show()
    sage: print "3D rysunek atraktora Lorenza"
    sage: p3d.show()
    
.. end of input
